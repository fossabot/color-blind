// Generated by CoffeeScript 1.3.3
(function() {
  var Actor, AssetManager, SCALE, actor, assetManager, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2PolygonShape, b2Vec2, b2World, canvas, clearCanvas, ctx, defs, draw, init, setup, setupObjects, setupWalls, stats, update, world;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  SCALE = 30;

  Actor = (function() {

    function Actor(body, sprite) {
      this.body = body;
      this.sprite = sprite;
    }

    Actor.prototype.draw = function(ctx) {
      var angle, x, y;
      x = this.body.GetPosition().x * SCALE;
      y = this.body.GetPosition().y * SCALE;
      angle = this.body.GetAngle();
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(angle);
      ctx.drawImage(this.sprite, -15, -15, 30, 30);
      return ctx.restore();
    };

    Actor.prototype.update = function() {};

    return Actor;

  })();

  AssetManager = (function() {

    function AssetManager(downloadQueue) {
      this.downloadQueue = downloadQueue != null ? downloadQueue : [];
      this.cache = {};
      this.successCount = 0;
      this.errorCount = 0;
    }

    AssetManager.prototype.downloadAll = function(callback) {
      var image, path, that, _i, _len, _ref;
      if (this.downloadQueue.length === 0) {
        callback();
      }
      _ref = this.downloadQueue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        image = new Image();
        that = this;
        image.addEventListener('load', (function() {
          console.log(this.src + ' is loaded.');
          return this.successCount += 1;
        }), false);
        image.addEventListener('error', (function() {
          return this.errorCount += 1;
        }), false);
        image.src = path;
        this.cache[path] = image;
      }
      return callback();
    };

    AssetManager.prototype.getAsset = function(path) {
      return this.cache[path];
    };

    AssetManager.prototype.queueDownload = function(path) {
      return this.downloadQueue.push(path);
    };

    return AssetManager;

  })();

  actor = {};

  assetManager = new AssetManager();

  canvas = document.getElementById('game');

  ctx = canvas.getContext('2d');

  defs = {
    body: new b2BodyDef(),
    fixture: new b2FixtureDef()
  };

  stats = new Stats();

  world = new b2World(new b2Vec2(5, 10), true);

  init = function() {
    stats.setMode(0);
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.left = '150px';
    stats.domElement.style.top = '15px';
    document.body.appendChild(stats.domElement);
    assetManager.queueDownload('assets/images/ball.png');
    return assetManager.downloadAll(function() {
      setup();
      return requestAnimationFrame(update);
    });
  };

  setup = function() {
    setupWalls();
    return setupObjects();
  };

  setupWalls = function() {
    defs.fixture.density = 1.0;
    defs.fixture.friction = 1.0;
    defs.fixture.restitution = 0.8;
    defs.body.type = b2Body.b2_staticBody;
    defs.body.position.x = (canvas.width / 2) / SCALE;
    defs.body.position.y = 470 / SCALE;
    defs.fixture.shape = new b2PolygonShape();
    defs.fixture.shape.SetAsBox((640 / SCALE) / 2, (10 / SCALE) / 2);
    world.CreateBody(defs.body).CreateFixture(defs.fixture);
    defs.fixture.shape.SetAsBox((10 / SCALE) / 2, (480 / SCALE) / 2);
    defs.body.position.x = 5 / SCALE;
    defs.body.position.y = (canvas.height / 2) / SCALE;
    world.CreateBody(defs.body).CreateFixture(defs.fixture);
    defs.body.position.x = (canvas.width - 5) / SCALE;
    defs.body.position.y = (canvas.height / 2) / SCALE;
    return world.CreateBody(defs.body).CreateFixture(defs.fixture);
  };

  setupObjects = function() {
    var actorBody;
    defs.body.type = b2Body.b2_dynamicBody;
    defs.fixture.shape = new b2CircleShape(30 / SCALE);
    defs.body.position.x = Math.random() * 640 / SCALE;
    defs.body.position.y = ((Math.random() * 240) - 100) / SCALE;
    actorBody = world.CreateBody(defs.body);
    actorBody.CreateFixture(defs.fixture);
    return actor = new Actor(actorBody, assetManager.getAsset('assets/images/ball.png'));
  };

  update = function() {
    stats.begin();
    world.Step(1 / 60, 10, 10);
    world.ClearForces();
    draw();
    stats.end();
    return requestAnimationFrame(update);
  };

  draw = function() {
    clearCanvas();
    return actor.draw(ctx);
  };

  clearCanvas = function() {
    ctx.save();
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    return ctx.restore();
  };

  init();

}).call(this);
