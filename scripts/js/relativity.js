// Generated by CoffeeScript 1.3.3
(function() {
  var b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2PolygonShape, b2Vec2, b2World, canvas, ctx, draw, init, stats, update, world;

  stats = new Stats();

  stats.setMode(0);

  stats.domElement.style.position = 'absolute';

  stats.domElement.style.left = '150px';

  stats.domElement.style.top = '15px';

  document.body.appendChild(stats.domElement);

  canvas = document.getElementById('c');

  ctx = canvas.getContext('2d');

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  world = {};

  init = function() {
    var SCALE, bodyDef, debugDraw, fixDef, i, _i;
    world = new b2World(new b2Vec2(0, 10), true);
    SCALE = 30;
    fixDef = new b2FixtureDef();
    fixDef.density = 1.0;
    fixDef.friction = 0.5;
    fixDef.restitution = 0.75;
    bodyDef = new b2BodyDef();
    bodyDef.type = b2Body.b2_staticBody;
    bodyDef.position.x = (canvas.width / 2) / SCALE;
    bodyDef.position.y = 470 / SCALE;
    fixDef.shape = new b2PolygonShape();
    fixDef.shape.SetAsBox((640 / SCALE) / 2, (10 / SCALE) / 2);
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    fixDef.shape.SetAsBox((10 / SCALE) / 2, (480 / SCALE) / 2);
    bodyDef.position.x = 5 / SCALE;
    bodyDef.position.y = (canvas.height / 2) / SCALE;
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    bodyDef.position.x = (canvas.width - 5) / SCALE;
    bodyDef.position.y = (canvas.height / 2) / SCALE;
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    bodyDef.type = b2Body.b2_dynamicBody;
    for (i = _i = 0; _i <= 20; i = ++_i) {
      if (Math.random() > 0.5) {
        fixDef.shape = new b2PolygonShape();
        fixDef.shape.SetAsBox(Math.random() + 0.1, Math.random() + 0.1);
      } else {
        fixDef.shape = new b2CircleShape(Math.random() + 0.1);
      }
      bodyDef.position.x = Math.random() * 640 / SCALE;
      bodyDef.position.y = ((Math.random() * 240) - 100) / SCALE;
      world.CreateBody(bodyDef).CreateFixture(fixDef);
    }
    debugDraw = new b2DebugDraw();
    debugDraw.SetSprite(document.getElementById('c').getContext('2d'));
    debugDraw.SetDrawScale(SCALE);
    debugDraw.SetFillAlpha(0.3);
    debugDraw.SetLineThickness(1.0);
    debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
    world.SetDebugDraw(debugDraw);
    return setTimeout(init, 10000);
  };

  update = function() {
    world.Step(1 / 60, 10, 10);
    draw();
    world.ClearForces();
    stats.update();
    return requestAnimationFrame(update);
  };

  draw = function() {
    return world.DrawDebugData();
  };

  init();

  requestAnimationFrame(update);

}).call(this);
